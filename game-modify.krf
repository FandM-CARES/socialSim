(in-microtheory ModifyGamesMt)

;;; remove ?agent from StagHuntX game
(preconditionForMethod
 (and
    (genlMt ?game StagHuntMt)
    (isHunter ?agent)
      )
 (methodForAction
  (removeAgentFromGame ?agent ?game)
  (actionSequence
   (TheList
        (makeModifiedStep ?agent (Step1MtFn ?game))
        (makeModifiedStep ?agent (Step1MtFn ?game))
        (makeModifiedStep ?agent (Step1MtFn ?game))
        (makeModifiedStep ?agent (CoopMtFn ?game))      ;;; is this the most efficient way to do this?
    ))))


(preconditionForMethod
 (and
      )
 (methodForAction
  (makeModifiedStep ?agent ?step)
  (actionSequence
   (TheList
        (ist-Information ?step ?expression)
        (not (containsPattern ?expression ?agent))          ;;; order??
        (unifies ?mt (AgentRemovedStepFn ?agent ?case))
        (doRecordMembersInContext ?mt ?expression)
    ))))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(<== (isHunter ?agent)
    (evaluates ?agent AgentA))

(<== (isHunter ?agent)
    (evaluates ?agent AgentB))

(<== (isHunter ?agent)
    (evaluates ?agent AgentC))          ;;; is this the most efficient way to do this?



;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(isa removeAgentFromGame ComplexActionPredicate)
(arity removeAgentFromGame 2)
(arg1Isa removeAgentFromGame Agent-Generic)
(arg2Isa removeAgentFromGame Microtheory)

(isa removeAgentFromStep ComplexActionPredicate)
(arity removeAgentFromStep 2)
(arg1Isa removeAgentFromStep Agent-Generic)
(arg2Isa removeAgentFromGame Microtheory)

(isa AgentRemovedStepFn Function-Denotational)
(arity AgentRemovedStepFn 2)
(arg1Isa AgentRemovedStepFn Agent-Generic)
(arg2Isa AgentRemovedStepFn Microtheory)
(resultIsa AgentRemovedStepFn Microtheory)